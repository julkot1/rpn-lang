// Code generated from Stc.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type StcLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var StcLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func stclexerLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'fun'", "'{'", "'}'", "'if'", "'else'", "'repeat'", "'('", "')'",
		"'dup'", "'rot'", "'swap'", "'pop'", "'over'", "':'", "'!'", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "':='", "'&'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "STACK_PREVENTION",
		"NUMBER", "SIGNED_NUMBER", "FLOAT", "SIGNED_FLOAT", "FLOAT_E", "SIGNED_FLOAT_E",
		"BIN_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "BOOL", "SIMPLE_TYPE",
		"LOGIC_OPERATOR", "ARITHMETIC_OPERATOR", "ASSIGN_OPERATOR", "REFERENCE_OPERATOR",
		"BUILD_IN_OPERATOR", "ID", "WS",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "STACK_PREVENTION", "NUMBER",
		"SIGNED_NUMBER", "FLOAT", "SIGNED_FLOAT", "FLOAT_E", "SIGNED_FLOAT_E",
		"DIGIT", "BIN_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "BOOL", "ESC",
		"SIMPLE_TYPE", "LOGIC_OPERATOR", "ARITHMETIC_OPERATOR", "ASSIGN_OPERATOR",
		"REFERENCE_OPERATOR", "BUILD_IN_OPERATOR", "ID", "WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 34, 328, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 1, 0,
		1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4,
		1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6,
		1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 4, 15, 128, 8, 15, 11, 15,
		12, 15, 129, 1, 16, 1, 16, 4, 16, 134, 8, 16, 11, 16, 12, 16, 135, 1, 17,
		4, 17, 139, 8, 17, 11, 17, 12, 17, 140, 1, 17, 1, 17, 4, 17, 145, 8, 17,
		11, 17, 12, 17, 146, 1, 18, 1, 18, 4, 18, 151, 8, 18, 11, 18, 12, 18, 152,
		1, 18, 1, 18, 4, 18, 157, 8, 18, 11, 18, 12, 18, 158, 1, 19, 4, 19, 162,
		8, 19, 11, 19, 12, 19, 163, 1, 19, 1, 19, 4, 19, 168, 8, 19, 11, 19, 12,
		19, 169, 3, 19, 172, 8, 19, 1, 19, 1, 19, 3, 19, 176, 8, 19, 1, 19, 4,
		19, 179, 8, 19, 11, 19, 12, 19, 180, 1, 20, 1, 20, 4, 20, 185, 8, 20, 11,
		20, 12, 20, 186, 1, 20, 1, 20, 4, 20, 191, 8, 20, 11, 20, 12, 20, 192,
		3, 20, 195, 8, 20, 1, 20, 1, 20, 3, 20, 199, 8, 20, 1, 20, 4, 20, 202,
		8, 20, 11, 20, 12, 20, 203, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 4, 22, 211,
		8, 22, 11, 22, 12, 22, 212, 1, 23, 1, 23, 1, 23, 4, 23, 218, 8, 23, 11,
		23, 12, 23, 219, 1, 24, 1, 24, 1, 24, 5, 24, 225, 8, 24, 10, 24, 12, 24,
		228, 9, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 3, 25, 235, 8, 25, 1, 25,
		1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3,
		26, 248, 8, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1,
		28, 1, 28, 3, 28, 270, 8, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1,
		29, 3, 29, 289, 8, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32,
		1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 313, 8, 33, 1, 34, 1, 34, 5, 34,
		317, 8, 34, 10, 34, 12, 34, 320, 9, 34, 1, 35, 4, 35, 323, 8, 35, 11, 35,
		12, 35, 324, 1, 35, 1, 35, 0, 0, 36, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11,
		6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15,
		31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 0, 45, 22, 47, 23,
		49, 24, 51, 25, 53, 26, 55, 0, 57, 27, 59, 28, 61, 29, 63, 30, 65, 31,
		67, 32, 69, 33, 71, 34, 1, 0, 15, 2, 0, 43, 43, 45, 45, 2, 0, 69, 69, 101,
		101, 1, 0, 48, 57, 2, 0, 66, 66, 98, 98, 1, 0, 48, 49, 2, 0, 88, 88, 120,
		120, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0, 34, 34, 92, 92, 2, 0, 39, 39,
		92, 92, 8, 0, 34, 34, 39, 39, 92, 92, 98, 98, 102, 102, 110, 110, 114,
		114, 116, 116, 2, 0, 60, 60, 62, 62, 4, 0, 37, 37, 42, 43, 45, 45, 47,
		47, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122,
		3, 0, 9, 10, 13, 13, 32, 32, 363, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0,
		5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0,
		13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0,
		0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0,
		0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0,
		0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 45, 1,
		0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53,
		1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0,
		63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0,
		0, 71, 1, 0, 0, 0, 1, 73, 1, 0, 0, 0, 3, 77, 1, 0, 0, 0, 5, 79, 1, 0, 0,
		0, 7, 81, 1, 0, 0, 0, 9, 84, 1, 0, 0, 0, 11, 89, 1, 0, 0, 0, 13, 96, 1,
		0, 0, 0, 15, 98, 1, 0, 0, 0, 17, 100, 1, 0, 0, 0, 19, 104, 1, 0, 0, 0,
		21, 108, 1, 0, 0, 0, 23, 113, 1, 0, 0, 0, 25, 117, 1, 0, 0, 0, 27, 122,
		1, 0, 0, 0, 29, 124, 1, 0, 0, 0, 31, 127, 1, 0, 0, 0, 33, 131, 1, 0, 0,
		0, 35, 138, 1, 0, 0, 0, 37, 148, 1, 0, 0, 0, 39, 161, 1, 0, 0, 0, 41, 182,
		1, 0, 0, 0, 43, 205, 1, 0, 0, 0, 45, 207, 1, 0, 0, 0, 47, 214, 1, 0, 0,
		0, 49, 221, 1, 0, 0, 0, 51, 231, 1, 0, 0, 0, 53, 247, 1, 0, 0, 0, 55, 249,
		1, 0, 0, 0, 57, 269, 1, 0, 0, 0, 59, 288, 1, 0, 0, 0, 61, 290, 1, 0, 0,
		0, 63, 292, 1, 0, 0, 0, 65, 295, 1, 0, 0, 0, 67, 312, 1, 0, 0, 0, 69, 314,
		1, 0, 0, 0, 71, 322, 1, 0, 0, 0, 73, 74, 5, 102, 0, 0, 74, 75, 5, 117,
		0, 0, 75, 76, 5, 110, 0, 0, 76, 2, 1, 0, 0, 0, 77, 78, 5, 123, 0, 0, 78,
		4, 1, 0, 0, 0, 79, 80, 5, 125, 0, 0, 80, 6, 1, 0, 0, 0, 81, 82, 5, 105,
		0, 0, 82, 83, 5, 102, 0, 0, 83, 8, 1, 0, 0, 0, 84, 85, 5, 101, 0, 0, 85,
		86, 5, 108, 0, 0, 86, 87, 5, 115, 0, 0, 87, 88, 5, 101, 0, 0, 88, 10, 1,
		0, 0, 0, 89, 90, 5, 114, 0, 0, 90, 91, 5, 101, 0, 0, 91, 92, 5, 112, 0,
		0, 92, 93, 5, 101, 0, 0, 93, 94, 5, 97, 0, 0, 94, 95, 5, 116, 0, 0, 95,
		12, 1, 0, 0, 0, 96, 97, 5, 40, 0, 0, 97, 14, 1, 0, 0, 0, 98, 99, 5, 41,
		0, 0, 99, 16, 1, 0, 0, 0, 100, 101, 5, 100, 0, 0, 101, 102, 5, 117, 0,
		0, 102, 103, 5, 112, 0, 0, 103, 18, 1, 0, 0, 0, 104, 105, 5, 114, 0, 0,
		105, 106, 5, 111, 0, 0, 106, 107, 5, 116, 0, 0, 107, 20, 1, 0, 0, 0, 108,
		109, 5, 115, 0, 0, 109, 110, 5, 119, 0, 0, 110, 111, 5, 97, 0, 0, 111,
		112, 5, 112, 0, 0, 112, 22, 1, 0, 0, 0, 113, 114, 5, 112, 0, 0, 114, 115,
		5, 111, 0, 0, 115, 116, 5, 112, 0, 0, 116, 24, 1, 0, 0, 0, 117, 118, 5,
		111, 0, 0, 118, 119, 5, 118, 0, 0, 119, 120, 5, 101, 0, 0, 120, 121, 5,
		114, 0, 0, 121, 26, 1, 0, 0, 0, 122, 123, 5, 58, 0, 0, 123, 28, 1, 0, 0,
		0, 124, 125, 5, 33, 0, 0, 125, 30, 1, 0, 0, 0, 126, 128, 3, 43, 21, 0,
		127, 126, 1, 0, 0, 0, 128, 129, 1, 0, 0, 0, 129, 127, 1, 0, 0, 0, 129,
		130, 1, 0, 0, 0, 130, 32, 1, 0, 0, 0, 131, 133, 7, 0, 0, 0, 132, 134, 3,
		43, 21, 0, 133, 132, 1, 0, 0, 0, 134, 135, 1, 0, 0, 0, 135, 133, 1, 0,
		0, 0, 135, 136, 1, 0, 0, 0, 136, 34, 1, 0, 0, 0, 137, 139, 3, 43, 21, 0,
		138, 137, 1, 0, 0, 0, 139, 140, 1, 0, 0, 0, 140, 138, 1, 0, 0, 0, 140,
		141, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 144, 5, 46, 0, 0, 143, 145,
		3, 43, 21, 0, 144, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 144, 1,
		0, 0, 0, 146, 147, 1, 0, 0, 0, 147, 36, 1, 0, 0, 0, 148, 150, 7, 0, 0,
		0, 149, 151, 3, 43, 21, 0, 150, 149, 1, 0, 0, 0, 151, 152, 1, 0, 0, 0,
		152, 150, 1, 0, 0, 0, 152, 153, 1, 0, 0, 0, 153, 154, 1, 0, 0, 0, 154,
		156, 5, 46, 0, 0, 155, 157, 3, 43, 21, 0, 156, 155, 1, 0, 0, 0, 157, 158,
		1, 0, 0, 0, 158, 156, 1, 0, 0, 0, 158, 159, 1, 0, 0, 0, 159, 38, 1, 0,
		0, 0, 160, 162, 3, 43, 21, 0, 161, 160, 1, 0, 0, 0, 162, 163, 1, 0, 0,
		0, 163, 161, 1, 0, 0, 0, 163, 164, 1, 0, 0, 0, 164, 171, 1, 0, 0, 0, 165,
		167, 5, 46, 0, 0, 166, 168, 3, 43, 21, 0, 167, 166, 1, 0, 0, 0, 168, 169,
		1, 0, 0, 0, 169, 167, 1, 0, 0, 0, 169, 170, 1, 0, 0, 0, 170, 172, 1, 0,
		0, 0, 171, 165, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 173, 1, 0, 0, 0,
		173, 175, 7, 1, 0, 0, 174, 176, 7, 0, 0, 0, 175, 174, 1, 0, 0, 0, 175,
		176, 1, 0, 0, 0, 176, 178, 1, 0, 0, 0, 177, 179, 3, 43, 21, 0, 178, 177,
		1, 0, 0, 0, 179, 180, 1, 0, 0, 0, 180, 178, 1, 0, 0, 0, 180, 181, 1, 0,
		0, 0, 181, 40, 1, 0, 0, 0, 182, 184, 7, 0, 0, 0, 183, 185, 3, 43, 21, 0,
		184, 183, 1, 0, 0, 0, 185, 186, 1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186,
		187, 1, 0, 0, 0, 187, 194, 1, 0, 0, 0, 188, 190, 5, 46, 0, 0, 189, 191,
		3, 43, 21, 0, 190, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 190, 1,
		0, 0, 0, 192, 193, 1, 0, 0, 0, 193, 195, 1, 0, 0, 0, 194, 188, 1, 0, 0,
		0, 194, 195, 1, 0, 0, 0, 195, 196, 1, 0, 0, 0, 196, 198, 7, 1, 0, 0, 197,
		199, 7, 0, 0, 0, 198, 197, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199, 201,
		1, 0, 0, 0, 200, 202, 3, 43, 21, 0, 201, 200, 1, 0, 0, 0, 202, 203, 1,
		0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 42, 1, 0, 0,
		0, 205, 206, 7, 2, 0, 0, 206, 44, 1, 0, 0, 0, 207, 208, 5, 48, 0, 0, 208,
		210, 7, 3, 0, 0, 209, 211, 7, 4, 0, 0, 210, 209, 1, 0, 0, 0, 211, 212,
		1, 0, 0, 0, 212, 210, 1, 0, 0, 0, 212, 213, 1, 0, 0, 0, 213, 46, 1, 0,
		0, 0, 214, 215, 5, 48, 0, 0, 215, 217, 7, 5, 0, 0, 216, 218, 7, 6, 0, 0,
		217, 216, 1, 0, 0, 0, 218, 219, 1, 0, 0, 0, 219, 217, 1, 0, 0, 0, 219,
		220, 1, 0, 0, 0, 220, 48, 1, 0, 0, 0, 221, 226, 5, 34, 0, 0, 222, 225,
		3, 55, 27, 0, 223, 225, 8, 7, 0, 0, 224, 222, 1, 0, 0, 0, 224, 223, 1,
		0, 0, 0, 225, 228, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 226, 227, 1, 0, 0,
		0, 227, 229, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 229, 230, 5, 34, 0, 0, 230,
		50, 1, 0, 0, 0, 231, 234, 5, 39, 0, 0, 232, 235, 3, 55, 27, 0, 233, 235,
		8, 8, 0, 0, 234, 232, 1, 0, 0, 0, 234, 233, 1, 0, 0, 0, 235, 236, 1, 0,
		0, 0, 236, 237, 5, 39, 0, 0, 237, 52, 1, 0, 0, 0, 238, 239, 5, 116, 0,
		0, 239, 240, 5, 114, 0, 0, 240, 241, 5, 117, 0, 0, 241, 248, 5, 101, 0,
		0, 242, 243, 5, 102, 0, 0, 243, 244, 5, 97, 0, 0, 244, 245, 5, 108, 0,
		0, 245, 246, 5, 115, 0, 0, 246, 248, 5, 101, 0, 0, 247, 238, 1, 0, 0, 0,
		247, 242, 1, 0, 0, 0, 248, 54, 1, 0, 0, 0, 249, 250, 5, 92, 0, 0, 250,
		251, 7, 9, 0, 0, 251, 56, 1, 0, 0, 0, 252, 253, 5, 73, 0, 0, 253, 254,
		5, 54, 0, 0, 254, 270, 5, 52, 0, 0, 255, 256, 5, 73, 0, 0, 256, 270, 5,
		56, 0, 0, 257, 258, 5, 83, 0, 0, 258, 259, 5, 116, 0, 0, 259, 270, 5, 114,
		0, 0, 260, 261, 5, 70, 0, 0, 261, 262, 5, 108, 0, 0, 262, 263, 5, 111,
		0, 0, 263, 264, 5, 97, 0, 0, 264, 270, 5, 116, 0, 0, 265, 266, 5, 66, 0,
		0, 266, 267, 5, 111, 0, 0, 267, 268, 5, 111, 0, 0, 268, 270, 5, 108, 0,
		0, 269, 252, 1, 0, 0, 0, 269, 255, 1, 0, 0, 0, 269, 257, 1, 0, 0, 0, 269,
		260, 1, 0, 0, 0, 269, 265, 1, 0, 0, 0, 270, 58, 1, 0, 0, 0, 271, 272, 5,
		60, 0, 0, 272, 289, 5, 61, 0, 0, 273, 274, 5, 62, 0, 0, 274, 289, 5, 61,
		0, 0, 275, 276, 5, 33, 0, 0, 276, 289, 5, 61, 0, 0, 277, 278, 5, 61, 0,
		0, 278, 289, 5, 61, 0, 0, 279, 289, 7, 10, 0, 0, 280, 281, 5, 97, 0, 0,
		281, 282, 5, 110, 0, 0, 282, 289, 5, 100, 0, 0, 283, 284, 5, 111, 0, 0,
		284, 289, 5, 114, 0, 0, 285, 286, 5, 110, 0, 0, 286, 287, 5, 111, 0, 0,
		287, 289, 5, 116, 0, 0, 288, 271, 1, 0, 0, 0, 288, 273, 1, 0, 0, 0, 288,
		275, 1, 0, 0, 0, 288, 277, 1, 0, 0, 0, 288, 279, 1, 0, 0, 0, 288, 280,
		1, 0, 0, 0, 288, 283, 1, 0, 0, 0, 288, 285, 1, 0, 0, 0, 289, 60, 1, 0,
		0, 0, 290, 291, 7, 11, 0, 0, 291, 62, 1, 0, 0, 0, 292, 293, 5, 58, 0, 0,
		293, 294, 5, 61, 0, 0, 294, 64, 1, 0, 0, 0, 295, 296, 5, 38, 0, 0, 296,
		66, 1, 0, 0, 0, 297, 298, 5, 116, 0, 0, 298, 299, 5, 121, 0, 0, 299, 300,
		5, 112, 0, 0, 300, 301, 5, 101, 0, 0, 301, 302, 5, 111, 0, 0, 302, 313,
		5, 102, 0, 0, 303, 304, 5, 97, 0, 0, 304, 313, 5, 116, 0, 0, 305, 306,
		5, 108, 0, 0, 306, 307, 5, 101, 0, 0, 307, 313, 5, 110, 0, 0, 308, 309,
		5, 99, 0, 0, 309, 310, 5, 97, 0, 0, 310, 311, 5, 108, 0, 0, 311, 313, 5,
		108, 0, 0, 312, 297, 1, 0, 0, 0, 312, 303, 1, 0, 0, 0, 312, 305, 1, 0,
		0, 0, 312, 308, 1, 0, 0, 0, 313, 68, 1, 0, 0, 0, 314, 318, 7, 12, 0, 0,
		315, 317, 7, 13, 0, 0, 316, 315, 1, 0, 0, 0, 317, 320, 1, 0, 0, 0, 318,
		316, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 70, 1, 0, 0, 0, 320, 318, 1,
		0, 0, 0, 321, 323, 7, 14, 0, 0, 322, 321, 1, 0, 0, 0, 323, 324, 1, 0, 0,
		0, 324, 322, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326,
		327, 6, 35, 0, 0, 327, 72, 1, 0, 0, 0, 28, 0, 129, 135, 140, 146, 152,
		158, 163, 169, 171, 175, 180, 186, 192, 194, 198, 203, 212, 219, 224, 226,
		234, 247, 269, 288, 312, 318, 324, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// StcLexerInit initializes any static state used to implement StcLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewStcLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func StcLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.once.Do(stclexerLexerInit)
}

// NewStcLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewStcLexer(input antlr.CharStream) *StcLexer {
	StcLexerInit()
	l := new(StcLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &StcLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Stc.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// StcLexer tokens.
const (
	StcLexerT__0                = 1
	StcLexerT__1                = 2
	StcLexerT__2                = 3
	StcLexerT__3                = 4
	StcLexerT__4                = 5
	StcLexerT__5                = 6
	StcLexerT__6                = 7
	StcLexerT__7                = 8
	StcLexerT__8                = 9
	StcLexerT__9                = 10
	StcLexerT__10               = 11
	StcLexerT__11               = 12
	StcLexerT__12               = 13
	StcLexerT__13               = 14
	StcLexerSTACK_PREVENTION    = 15
	StcLexerNUMBER              = 16
	StcLexerSIGNED_NUMBER       = 17
	StcLexerFLOAT               = 18
	StcLexerSIGNED_FLOAT        = 19
	StcLexerFLOAT_E             = 20
	StcLexerSIGNED_FLOAT_E      = 21
	StcLexerBIN_NUMBER          = 22
	StcLexerHEX_NUMBER          = 23
	StcLexerSTRING              = 24
	StcLexerCHAR                = 25
	StcLexerBOOL                = 26
	StcLexerSIMPLE_TYPE         = 27
	StcLexerLOGIC_OPERATOR      = 28
	StcLexerARITHMETIC_OPERATOR = 29
	StcLexerASSIGN_OPERATOR     = 30
	StcLexerREFERENCE_OPERATOR  = 31
	StcLexerBUILD_IN_OPERATOR   = 32
	StcLexerID                  = 33
	StcLexerWS                  = 34
)
