// Code generated from Stc.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type StcLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var StcLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func stclexerLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'fun'", "'<'", "'>'", "'{'", "'}'", "':'", "'if'", "'else'", "'repeat'",
		"'('", "')'", "'dup'", "'rot'", "'swap'", "'pop'", "'over'", "'c:'",
		"'new'", "'struct'", "'!'", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "':='", "'&'", "", "'['", "']'", "'arr'", "'@'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "NEW", "STRUCT_DEFINITION", "STACK_PREVENTION", "NUMBER", "SIGNED_NUMBER",
		"FLOAT", "SIGNED_FLOAT", "FLOAT_E", "SIGNED_FLOAT_E", "BIN_NUMBER",
		"HEX_NUMBER", "STRING", "CHAR", "BOOL", "SIMPLE_TYPE", "LOGIC_OPERATOR",
		"ARITHMETIC_OPERATOR", "ASSIGN_OPERATOR", "REFERENCE_OPERATOR", "BUILD_IN_OPERATOR",
		"ARRAY_OPEN", "ARRAY_CLOSE", "ARRAY_OPERATOR", "AT", "ID", "WS",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16",
		"NEW", "STRUCT_DEFINITION", "STACK_PREVENTION", "NUMBER", "SIGNED_NUMBER",
		"FLOAT", "SIGNED_FLOAT", "FLOAT_E", "SIGNED_FLOAT_E", "DIGIT", "BIN_NUMBER",
		"HEX_NUMBER", "STRING", "CHAR", "BOOL", "ESC", "SIMPLE_TYPE", "LOGIC_OPERATOR",
		"ARITHMETIC_OPERATOR", "ASSIGN_OPERATOR", "REFERENCE_OPERATOR", "BUILD_IN_OPERATOR",
		"ARRAY_OPEN", "ARRAY_CLOSE", "ARRAY_OPERATOR", "AT", "ID", "WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 43, 383, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 1, 0, 1, 0, 1, 0, 1, 0, 1,
		1, 1, 1, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1,
		6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12,
		1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17,
		1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1,
		19, 1, 20, 4, 20, 164, 8, 20, 11, 20, 12, 20, 165, 1, 21, 1, 21, 4, 21,
		170, 8, 21, 11, 21, 12, 21, 171, 1, 22, 4, 22, 175, 8, 22, 11, 22, 12,
		22, 176, 1, 22, 1, 22, 4, 22, 181, 8, 22, 11, 22, 12, 22, 182, 1, 23, 1,
		23, 4, 23, 187, 8, 23, 11, 23, 12, 23, 188, 1, 23, 1, 23, 4, 23, 193, 8,
		23, 11, 23, 12, 23, 194, 1, 24, 4, 24, 198, 8, 24, 11, 24, 12, 24, 199,
		1, 24, 1, 24, 4, 24, 204, 8, 24, 11, 24, 12, 24, 205, 3, 24, 208, 8, 24,
		1, 24, 1, 24, 3, 24, 212, 8, 24, 1, 24, 4, 24, 215, 8, 24, 11, 24, 12,
		24, 216, 1, 25, 1, 25, 4, 25, 221, 8, 25, 11, 25, 12, 25, 222, 1, 25, 1,
		25, 4, 25, 227, 8, 25, 11, 25, 12, 25, 228, 3, 25, 231, 8, 25, 1, 25, 1,
		25, 3, 25, 235, 8, 25, 1, 25, 4, 25, 238, 8, 25, 11, 25, 12, 25, 239, 1,
		26, 1, 26, 1, 27, 1, 27, 1, 27, 4, 27, 247, 8, 27, 11, 27, 12, 27, 248,
		1, 28, 1, 28, 1, 28, 4, 28, 254, 8, 28, 11, 28, 12, 28, 255, 1, 29, 1,
		29, 1, 29, 5, 29, 261, 8, 29, 10, 29, 12, 29, 264, 9, 29, 1, 29, 1, 29,
		1, 30, 1, 30, 1, 30, 3, 30, 271, 8, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 284, 8, 31, 1, 32,
		1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33,
		1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 3, 33, 313, 8, 33, 1, 34, 1, 34, 1,
		34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34,
		1, 34, 1, 34, 1, 34, 1, 34, 3, 34, 332, 8, 34, 1, 35, 1, 35, 1, 36, 1,
		36, 1, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38,
		1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 3,
		38, 358, 8, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41,
		1, 42, 1, 42, 1, 43, 1, 43, 5, 43, 372, 8, 43, 10, 43, 12, 43, 375, 9,
		43, 1, 44, 4, 44, 378, 8, 44, 11, 44, 12, 44, 379, 1, 44, 1, 44, 0, 0,
		45, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21,
		11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39,
		20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 0, 55, 27, 57,
		28, 59, 29, 61, 30, 63, 31, 65, 0, 67, 32, 69, 33, 71, 34, 73, 35, 75,
		36, 77, 37, 79, 38, 81, 39, 83, 40, 85, 41, 87, 42, 89, 43, 1, 0, 15, 2,
		0, 43, 43, 45, 45, 2, 0, 69, 69, 101, 101, 1, 0, 48, 57, 2, 0, 66, 66,
		98, 98, 1, 0, 48, 49, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97,
		102, 2, 0, 34, 34, 92, 92, 2, 0, 39, 39, 92, 92, 8, 0, 34, 34, 39, 39,
		92, 92, 98, 98, 102, 102, 110, 110, 114, 114, 116, 116, 2, 0, 60, 60, 62,
		62, 4, 0, 37, 37, 42, 43, 45, 45, 47, 47, 3, 0, 65, 90, 95, 95, 97, 122,
		4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 420,
		0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0,
		0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0,
		0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0,
		0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1,
		0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39,
		1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0,
		47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0,
		0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0,
		0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0,
		0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1,
		0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89,
		1, 0, 0, 0, 1, 91, 1, 0, 0, 0, 3, 95, 1, 0, 0, 0, 5, 97, 1, 0, 0, 0, 7,
		99, 1, 0, 0, 0, 9, 101, 1, 0, 0, 0, 11, 103, 1, 0, 0, 0, 13, 105, 1, 0,
		0, 0, 15, 108, 1, 0, 0, 0, 17, 113, 1, 0, 0, 0, 19, 120, 1, 0, 0, 0, 21,
		122, 1, 0, 0, 0, 23, 124, 1, 0, 0, 0, 25, 128, 1, 0, 0, 0, 27, 132, 1,
		0, 0, 0, 29, 137, 1, 0, 0, 0, 31, 141, 1, 0, 0, 0, 33, 146, 1, 0, 0, 0,
		35, 149, 1, 0, 0, 0, 37, 153, 1, 0, 0, 0, 39, 160, 1, 0, 0, 0, 41, 163,
		1, 0, 0, 0, 43, 167, 1, 0, 0, 0, 45, 174, 1, 0, 0, 0, 47, 184, 1, 0, 0,
		0, 49, 197, 1, 0, 0, 0, 51, 218, 1, 0, 0, 0, 53, 241, 1, 0, 0, 0, 55, 243,
		1, 0, 0, 0, 57, 250, 1, 0, 0, 0, 59, 257, 1, 0, 0, 0, 61, 267, 1, 0, 0,
		0, 63, 283, 1, 0, 0, 0, 65, 285, 1, 0, 0, 0, 67, 312, 1, 0, 0, 0, 69, 331,
		1, 0, 0, 0, 71, 333, 1, 0, 0, 0, 73, 335, 1, 0, 0, 0, 75, 338, 1, 0, 0,
		0, 77, 357, 1, 0, 0, 0, 79, 359, 1, 0, 0, 0, 81, 361, 1, 0, 0, 0, 83, 363,
		1, 0, 0, 0, 85, 367, 1, 0, 0, 0, 87, 369, 1, 0, 0, 0, 89, 377, 1, 0, 0,
		0, 91, 92, 5, 102, 0, 0, 92, 93, 5, 117, 0, 0, 93, 94, 5, 110, 0, 0, 94,
		2, 1, 0, 0, 0, 95, 96, 5, 60, 0, 0, 96, 4, 1, 0, 0, 0, 97, 98, 5, 62, 0,
		0, 98, 6, 1, 0, 0, 0, 99, 100, 5, 123, 0, 0, 100, 8, 1, 0, 0, 0, 101, 102,
		5, 125, 0, 0, 102, 10, 1, 0, 0, 0, 103, 104, 5, 58, 0, 0, 104, 12, 1, 0,
		0, 0, 105, 106, 5, 105, 0, 0, 106, 107, 5, 102, 0, 0, 107, 14, 1, 0, 0,
		0, 108, 109, 5, 101, 0, 0, 109, 110, 5, 108, 0, 0, 110, 111, 5, 115, 0,
		0, 111, 112, 5, 101, 0, 0, 112, 16, 1, 0, 0, 0, 113, 114, 5, 114, 0, 0,
		114, 115, 5, 101, 0, 0, 115, 116, 5, 112, 0, 0, 116, 117, 5, 101, 0, 0,
		117, 118, 5, 97, 0, 0, 118, 119, 5, 116, 0, 0, 119, 18, 1, 0, 0, 0, 120,
		121, 5, 40, 0, 0, 121, 20, 1, 0, 0, 0, 122, 123, 5, 41, 0, 0, 123, 22,
		1, 0, 0, 0, 124, 125, 5, 100, 0, 0, 125, 126, 5, 117, 0, 0, 126, 127, 5,
		112, 0, 0, 127, 24, 1, 0, 0, 0, 128, 129, 5, 114, 0, 0, 129, 130, 5, 111,
		0, 0, 130, 131, 5, 116, 0, 0, 131, 26, 1, 0, 0, 0, 132, 133, 5, 115, 0,
		0, 133, 134, 5, 119, 0, 0, 134, 135, 5, 97, 0, 0, 135, 136, 5, 112, 0,
		0, 136, 28, 1, 0, 0, 0, 137, 138, 5, 112, 0, 0, 138, 139, 5, 111, 0, 0,
		139, 140, 5, 112, 0, 0, 140, 30, 1, 0, 0, 0, 141, 142, 5, 111, 0, 0, 142,
		143, 5, 118, 0, 0, 143, 144, 5, 101, 0, 0, 144, 145, 5, 114, 0, 0, 145,
		32, 1, 0, 0, 0, 146, 147, 5, 99, 0, 0, 147, 148, 5, 58, 0, 0, 148, 34,
		1, 0, 0, 0, 149, 150, 5, 110, 0, 0, 150, 151, 5, 101, 0, 0, 151, 152, 5,
		119, 0, 0, 152, 36, 1, 0, 0, 0, 153, 154, 5, 115, 0, 0, 154, 155, 5, 116,
		0, 0, 155, 156, 5, 114, 0, 0, 156, 157, 5, 117, 0, 0, 157, 158, 5, 99,
		0, 0, 158, 159, 5, 116, 0, 0, 159, 38, 1, 0, 0, 0, 160, 161, 5, 33, 0,
		0, 161, 40, 1, 0, 0, 0, 162, 164, 3, 53, 26, 0, 163, 162, 1, 0, 0, 0, 164,
		165, 1, 0, 0, 0, 165, 163, 1, 0, 0, 0, 165, 166, 1, 0, 0, 0, 166, 42, 1,
		0, 0, 0, 167, 169, 7, 0, 0, 0, 168, 170, 3, 53, 26, 0, 169, 168, 1, 0,
		0, 0, 170, 171, 1, 0, 0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0,
		172, 44, 1, 0, 0, 0, 173, 175, 3, 53, 26, 0, 174, 173, 1, 0, 0, 0, 175,
		176, 1, 0, 0, 0, 176, 174, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 178,
		1, 0, 0, 0, 178, 180, 5, 46, 0, 0, 179, 181, 3, 53, 26, 0, 180, 179, 1,
		0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 180, 1, 0, 0, 0, 182, 183, 1, 0, 0,
		0, 183, 46, 1, 0, 0, 0, 184, 186, 7, 0, 0, 0, 185, 187, 3, 53, 26, 0, 186,
		185, 1, 0, 0, 0, 187, 188, 1, 0, 0, 0, 188, 186, 1, 0, 0, 0, 188, 189,
		1, 0, 0, 0, 189, 190, 1, 0, 0, 0, 190, 192, 5, 46, 0, 0, 191, 193, 3, 53,
		26, 0, 192, 191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 192, 1, 0, 0, 0,
		194, 195, 1, 0, 0, 0, 195, 48, 1, 0, 0, 0, 196, 198, 3, 53, 26, 0, 197,
		196, 1, 0, 0, 0, 198, 199, 1, 0, 0, 0, 199, 197, 1, 0, 0, 0, 199, 200,
		1, 0, 0, 0, 200, 207, 1, 0, 0, 0, 201, 203, 5, 46, 0, 0, 202, 204, 3, 53,
		26, 0, 203, 202, 1, 0, 0, 0, 204, 205, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0,
		205, 206, 1, 0, 0, 0, 206, 208, 1, 0, 0, 0, 207, 201, 1, 0, 0, 0, 207,
		208, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 211, 7, 1, 0, 0, 210, 212,
		7, 0, 0, 0, 211, 210, 1, 0, 0, 0, 211, 212, 1, 0, 0, 0, 212, 214, 1, 0,
		0, 0, 213, 215, 3, 53, 26, 0, 214, 213, 1, 0, 0, 0, 215, 216, 1, 0, 0,
		0, 216, 214, 1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 217, 50, 1, 0, 0, 0, 218,
		220, 7, 0, 0, 0, 219, 221, 3, 53, 26, 0, 220, 219, 1, 0, 0, 0, 221, 222,
		1, 0, 0, 0, 222, 220, 1, 0, 0, 0, 222, 223, 1, 0, 0, 0, 223, 230, 1, 0,
		0, 0, 224, 226, 5, 46, 0, 0, 225, 227, 3, 53, 26, 0, 226, 225, 1, 0, 0,
		0, 227, 228, 1, 0, 0, 0, 228, 226, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229,
		231, 1, 0, 0, 0, 230, 224, 1, 0, 0, 0, 230, 231, 1, 0, 0, 0, 231, 232,
		1, 0, 0, 0, 232, 234, 7, 1, 0, 0, 233, 235, 7, 0, 0, 0, 234, 233, 1, 0,
		0, 0, 234, 235, 1, 0, 0, 0, 235, 237, 1, 0, 0, 0, 236, 238, 3, 53, 26,
		0, 237, 236, 1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 237, 1, 0, 0, 0, 239,
		240, 1, 0, 0, 0, 240, 52, 1, 0, 0, 0, 241, 242, 7, 2, 0, 0, 242, 54, 1,
		0, 0, 0, 243, 244, 5, 48, 0, 0, 244, 246, 7, 3, 0, 0, 245, 247, 7, 4, 0,
		0, 246, 245, 1, 0, 0, 0, 247, 248, 1, 0, 0, 0, 248, 246, 1, 0, 0, 0, 248,
		249, 1, 0, 0, 0, 249, 56, 1, 0, 0, 0, 250, 251, 5, 48, 0, 0, 251, 253,
		7, 5, 0, 0, 252, 254, 7, 6, 0, 0, 253, 252, 1, 0, 0, 0, 254, 255, 1, 0,
		0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 58, 1, 0, 0, 0,
		257, 262, 5, 34, 0, 0, 258, 261, 3, 65, 32, 0, 259, 261, 8, 7, 0, 0, 260,
		258, 1, 0, 0, 0, 260, 259, 1, 0, 0, 0, 261, 264, 1, 0, 0, 0, 262, 260,
		1, 0, 0, 0, 262, 263, 1, 0, 0, 0, 263, 265, 1, 0, 0, 0, 264, 262, 1, 0,
		0, 0, 265, 266, 5, 34, 0, 0, 266, 60, 1, 0, 0, 0, 267, 270, 5, 39, 0, 0,
		268, 271, 3, 65, 32, 0, 269, 271, 8, 8, 0, 0, 270, 268, 1, 0, 0, 0, 270,
		269, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 273, 5, 39, 0, 0, 273, 62,
		1, 0, 0, 0, 274, 275, 5, 116, 0, 0, 275, 276, 5, 114, 0, 0, 276, 277, 5,
		117, 0, 0, 277, 284, 5, 101, 0, 0, 278, 279, 5, 102, 0, 0, 279, 280, 5,
		97, 0, 0, 280, 281, 5, 108, 0, 0, 281, 282, 5, 115, 0, 0, 282, 284, 5,
		101, 0, 0, 283, 274, 1, 0, 0, 0, 283, 278, 1, 0, 0, 0, 284, 64, 1, 0, 0,
		0, 285, 286, 5, 92, 0, 0, 286, 287, 7, 9, 0, 0, 287, 66, 1, 0, 0, 0, 288,
		289, 5, 73, 0, 0, 289, 290, 5, 54, 0, 0, 290, 313, 5, 52, 0, 0, 291, 292,
		5, 73, 0, 0, 292, 313, 5, 56, 0, 0, 293, 294, 5, 83, 0, 0, 294, 295, 5,
		116, 0, 0, 295, 313, 5, 114, 0, 0, 296, 297, 5, 70, 0, 0, 297, 298, 5,
		54, 0, 0, 298, 313, 5, 52, 0, 0, 299, 300, 5, 65, 0, 0, 300, 301, 5, 114,
		0, 0, 301, 313, 5, 114, 0, 0, 302, 303, 5, 66, 0, 0, 303, 304, 5, 111,
		0, 0, 304, 305, 5, 111, 0, 0, 305, 313, 5, 108, 0, 0, 306, 307, 5, 83,
		0, 0, 307, 308, 5, 116, 0, 0, 308, 309, 5, 114, 0, 0, 309, 310, 5, 117,
		0, 0, 310, 311, 5, 99, 0, 0, 311, 313, 5, 116, 0, 0, 312, 288, 1, 0, 0,
		0, 312, 291, 1, 0, 0, 0, 312, 293, 1, 0, 0, 0, 312, 296, 1, 0, 0, 0, 312,
		299, 1, 0, 0, 0, 312, 302, 1, 0, 0, 0, 312, 306, 1, 0, 0, 0, 313, 68, 1,
		0, 0, 0, 314, 315, 5, 60, 0, 0, 315, 332, 5, 61, 0, 0, 316, 317, 5, 62,
		0, 0, 317, 332, 5, 61, 0, 0, 318, 319, 5, 33, 0, 0, 319, 332, 5, 61, 0,
		0, 320, 321, 5, 61, 0, 0, 321, 332, 5, 61, 0, 0, 322, 332, 7, 10, 0, 0,
		323, 324, 5, 97, 0, 0, 324, 325, 5, 110, 0, 0, 325, 332, 5, 100, 0, 0,
		326, 327, 5, 111, 0, 0, 327, 332, 5, 114, 0, 0, 328, 329, 5, 110, 0, 0,
		329, 330, 5, 111, 0, 0, 330, 332, 5, 116, 0, 0, 331, 314, 1, 0, 0, 0, 331,
		316, 1, 0, 0, 0, 331, 318, 1, 0, 0, 0, 331, 320, 1, 0, 0, 0, 331, 322,
		1, 0, 0, 0, 331, 323, 1, 0, 0, 0, 331, 326, 1, 0, 0, 0, 331, 328, 1, 0,
		0, 0, 332, 70, 1, 0, 0, 0, 333, 334, 7, 11, 0, 0, 334, 72, 1, 0, 0, 0,
		335, 336, 5, 58, 0, 0, 336, 337, 5, 61, 0, 0, 337, 74, 1, 0, 0, 0, 338,
		339, 5, 38, 0, 0, 339, 76, 1, 0, 0, 0, 340, 341, 5, 116, 0, 0, 341, 342,
		5, 121, 0, 0, 342, 343, 5, 112, 0, 0, 343, 344, 5, 101, 0, 0, 344, 345,
		5, 111, 0, 0, 345, 358, 5, 102, 0, 0, 346, 347, 5, 108, 0, 0, 347, 348,
		5, 101, 0, 0, 348, 358, 5, 110, 0, 0, 349, 350, 5, 99, 0, 0, 350, 351,
		5, 97, 0, 0, 351, 352, 5, 108, 0, 0, 352, 358, 5, 108, 0, 0, 353, 354,
		5, 99, 0, 0, 354, 355, 5, 111, 0, 0, 355, 356, 5, 112, 0, 0, 356, 358,
		5, 121, 0, 0, 357, 340, 1, 0, 0, 0, 357, 346, 1, 0, 0, 0, 357, 349, 1,
		0, 0, 0, 357, 353, 1, 0, 0, 0, 358, 78, 1, 0, 0, 0, 359, 360, 5, 91, 0,
		0, 360, 80, 1, 0, 0, 0, 361, 362, 5, 93, 0, 0, 362, 82, 1, 0, 0, 0, 363,
		364, 5, 97, 0, 0, 364, 365, 5, 114, 0, 0, 365, 366, 5, 114, 0, 0, 366,
		84, 1, 0, 0, 0, 367, 368, 5, 64, 0, 0, 368, 86, 1, 0, 0, 0, 369, 373, 7,
		12, 0, 0, 370, 372, 7, 13, 0, 0, 371, 370, 1, 0, 0, 0, 372, 375, 1, 0,
		0, 0, 373, 371, 1, 0, 0, 0, 373, 374, 1, 0, 0, 0, 374, 88, 1, 0, 0, 0,
		375, 373, 1, 0, 0, 0, 376, 378, 7, 14, 0, 0, 377, 376, 1, 0, 0, 0, 378,
		379, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0, 379, 380, 1, 0, 0, 0, 380, 381,
		1, 0, 0, 0, 381, 382, 6, 44, 0, 0, 382, 90, 1, 0, 0, 0, 28, 0, 165, 171,
		176, 182, 188, 194, 199, 205, 207, 211, 216, 222, 228, 230, 234, 239, 248,
		255, 260, 262, 270, 283, 312, 331, 357, 373, 379, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// StcLexerInit initializes any static state used to implement StcLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewStcLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func StcLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.once.Do(stclexerLexerInit)
}

// NewStcLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewStcLexer(input antlr.CharStream) *StcLexer {
	StcLexerInit()
	l := new(StcLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &StcLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Stc.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// StcLexer tokens.
const (
	StcLexerT__0                = 1
	StcLexerT__1                = 2
	StcLexerT__2                = 3
	StcLexerT__3                = 4
	StcLexerT__4                = 5
	StcLexerT__5                = 6
	StcLexerT__6                = 7
	StcLexerT__7                = 8
	StcLexerT__8                = 9
	StcLexerT__9                = 10
	StcLexerT__10               = 11
	StcLexerT__11               = 12
	StcLexerT__12               = 13
	StcLexerT__13               = 14
	StcLexerT__14               = 15
	StcLexerT__15               = 16
	StcLexerT__16               = 17
	StcLexerNEW                 = 18
	StcLexerSTRUCT_DEFINITION   = 19
	StcLexerSTACK_PREVENTION    = 20
	StcLexerNUMBER              = 21
	StcLexerSIGNED_NUMBER       = 22
	StcLexerFLOAT               = 23
	StcLexerSIGNED_FLOAT        = 24
	StcLexerFLOAT_E             = 25
	StcLexerSIGNED_FLOAT_E      = 26
	StcLexerBIN_NUMBER          = 27
	StcLexerHEX_NUMBER          = 28
	StcLexerSTRING              = 29
	StcLexerCHAR                = 30
	StcLexerBOOL                = 31
	StcLexerSIMPLE_TYPE         = 32
	StcLexerLOGIC_OPERATOR      = 33
	StcLexerARITHMETIC_OPERATOR = 34
	StcLexerASSIGN_OPERATOR     = 35
	StcLexerREFERENCE_OPERATOR  = 36
	StcLexerBUILD_IN_OPERATOR   = 37
	StcLexerARRAY_OPEN          = 38
	StcLexerARRAY_CLOSE         = 39
	StcLexerARRAY_OPERATOR      = 40
	StcLexerAT                  = 41
	StcLexerID                  = 42
	StcLexerWS                  = 43
)
