// Code generated from Stc.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type StcLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var StcLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func stclexerLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'fun'", "'{'", "'}'", "':'", "'if'", "'else'", "'repeat'", "'('",
		"')'", "'dup'", "'rot'", "'swap'", "'pop'", "'over'", "'c:'", "'new'",
		"'struct'", "'!'", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "':='", "'&'", "", "'['", "']'", "'arr'", "'@'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "NEW",
		"STRUCT_DEFINITION", "STACK_PREVENTION", "NUMBER", "SIGNED_NUMBER",
		"FLOAT", "SIGNED_FLOAT", "FLOAT_E", "SIGNED_FLOAT_E", "BIN_NUMBER",
		"HEX_NUMBER", "STRING", "CHAR", "BOOL", "SIMPLE_TYPE", "LOGIC_OPERATOR",
		"ARITHMETIC_OPERATOR", "ASSIGN_OPERATOR", "REFERENCE_OPERATOR", "BUILD_IN_OPERATOR",
		"ARRAY_OPEN", "ARRAY_CLOSE", "ARRAY_OPERATOR", "AT", "ID", "WS",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "NEW", "STRUCT_DEFINITION",
		"STACK_PREVENTION", "NUMBER", "SIGNED_NUMBER", "FLOAT", "SIGNED_FLOAT",
		"FLOAT_E", "SIGNED_FLOAT_E", "DIGIT", "BIN_NUMBER", "HEX_NUMBER", "STRING",
		"CHAR", "BOOL", "ESC", "SIMPLE_TYPE", "LOGIC_OPERATOR", "ARITHMETIC_OPERATOR",
		"ASSIGN_OPERATOR", "REFERENCE_OPERATOR", "BUILD_IN_OPERATOR", "ARRAY_OPEN",
		"ARRAY_CLOSE", "ARRAY_OPERATOR", "AT", "ID", "WS",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 41, 364, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
		1, 3, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6,
		1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 17, 1, 17, 1, 18, 4, 18, 156, 8, 18, 11, 18, 12, 18, 157, 1, 19,
		1, 19, 4, 19, 162, 8, 19, 11, 19, 12, 19, 163, 1, 20, 4, 20, 167, 8, 20,
		11, 20, 12, 20, 168, 1, 20, 1, 20, 4, 20, 173, 8, 20, 11, 20, 12, 20, 174,
		1, 21, 1, 21, 4, 21, 179, 8, 21, 11, 21, 12, 21, 180, 1, 21, 1, 21, 4,
		21, 185, 8, 21, 11, 21, 12, 21, 186, 1, 22, 4, 22, 190, 8, 22, 11, 22,
		12, 22, 191, 1, 22, 1, 22, 4, 22, 196, 8, 22, 11, 22, 12, 22, 197, 3, 22,
		200, 8, 22, 1, 22, 1, 22, 3, 22, 204, 8, 22, 1, 22, 4, 22, 207, 8, 22,
		11, 22, 12, 22, 208, 1, 23, 1, 23, 4, 23, 213, 8, 23, 11, 23, 12, 23, 214,
		1, 23, 1, 23, 4, 23, 219, 8, 23, 11, 23, 12, 23, 220, 3, 23, 223, 8, 23,
		1, 23, 1, 23, 3, 23, 227, 8, 23, 1, 23, 4, 23, 230, 8, 23, 11, 23, 12,
		23, 231, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 4, 25, 239, 8, 25, 11, 25,
		12, 25, 240, 1, 26, 1, 26, 1, 26, 4, 26, 246, 8, 26, 11, 26, 12, 26, 247,
		1, 27, 1, 27, 1, 27, 5, 27, 253, 8, 27, 10, 27, 12, 27, 256, 9, 27, 1,
		27, 1, 27, 1, 28, 1, 28, 1, 28, 3, 28, 263, 8, 28, 1, 28, 1, 28, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 276, 8,
		29, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3,
		31, 298, 8, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32,
		1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 3, 32, 317,
		8, 32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1,
		36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36,
		3, 36, 339, 8, 36, 1, 37, 1, 37, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1,
		39, 1, 40, 1, 40, 1, 41, 1, 41, 5, 41, 353, 8, 41, 10, 41, 12, 41, 356,
		9, 41, 1, 42, 4, 42, 359, 8, 42, 11, 42, 12, 42, 360, 1, 42, 1, 42, 0,
		0, 43, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10,
		21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19,
		39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 0, 51, 25, 53, 26, 55, 27,
		57, 28, 59, 29, 61, 0, 63, 30, 65, 31, 67, 32, 69, 33, 71, 34, 73, 35,
		75, 36, 77, 37, 79, 38, 81, 39, 83, 40, 85, 41, 1, 0, 15, 2, 0, 43, 43,
		45, 45, 2, 0, 69, 69, 101, 101, 1, 0, 48, 57, 2, 0, 66, 66, 98, 98, 1,
		0, 48, 49, 2, 0, 88, 88, 120, 120, 3, 0, 48, 57, 65, 70, 97, 102, 2, 0,
		34, 34, 92, 92, 2, 0, 39, 39, 92, 92, 8, 0, 34, 34, 39, 39, 92, 92, 98,
		98, 102, 102, 110, 110, 114, 114, 116, 116, 2, 0, 60, 60, 62, 62, 4, 0,
		37, 37, 42, 43, 45, 45, 47, 47, 3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48,
		57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32, 32, 398, 0, 1, 1,
		0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1,
		0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17,
		1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0,
		25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0,
		0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0,
		0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0,
		0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1,
		0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67,
		1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0,
		75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0,
		0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 1, 87, 1, 0, 0, 0, 3, 91, 1, 0, 0,
		0, 5, 93, 1, 0, 0, 0, 7, 95, 1, 0, 0, 0, 9, 97, 1, 0, 0, 0, 11, 100, 1,
		0, 0, 0, 13, 105, 1, 0, 0, 0, 15, 112, 1, 0, 0, 0, 17, 114, 1, 0, 0, 0,
		19, 116, 1, 0, 0, 0, 21, 120, 1, 0, 0, 0, 23, 124, 1, 0, 0, 0, 25, 129,
		1, 0, 0, 0, 27, 133, 1, 0, 0, 0, 29, 138, 1, 0, 0, 0, 31, 141, 1, 0, 0,
		0, 33, 145, 1, 0, 0, 0, 35, 152, 1, 0, 0, 0, 37, 155, 1, 0, 0, 0, 39, 159,
		1, 0, 0, 0, 41, 166, 1, 0, 0, 0, 43, 176, 1, 0, 0, 0, 45, 189, 1, 0, 0,
		0, 47, 210, 1, 0, 0, 0, 49, 233, 1, 0, 0, 0, 51, 235, 1, 0, 0, 0, 53, 242,
		1, 0, 0, 0, 55, 249, 1, 0, 0, 0, 57, 259, 1, 0, 0, 0, 59, 275, 1, 0, 0,
		0, 61, 277, 1, 0, 0, 0, 63, 297, 1, 0, 0, 0, 65, 316, 1, 0, 0, 0, 67, 318,
		1, 0, 0, 0, 69, 320, 1, 0, 0, 0, 71, 323, 1, 0, 0, 0, 73, 338, 1, 0, 0,
		0, 75, 340, 1, 0, 0, 0, 77, 342, 1, 0, 0, 0, 79, 344, 1, 0, 0, 0, 81, 348,
		1, 0, 0, 0, 83, 350, 1, 0, 0, 0, 85, 358, 1, 0, 0, 0, 87, 88, 5, 102, 0,
		0, 88, 89, 5, 117, 0, 0, 89, 90, 5, 110, 0, 0, 90, 2, 1, 0, 0, 0, 91, 92,
		5, 123, 0, 0, 92, 4, 1, 0, 0, 0, 93, 94, 5, 125, 0, 0, 94, 6, 1, 0, 0,
		0, 95, 96, 5, 58, 0, 0, 96, 8, 1, 0, 0, 0, 97, 98, 5, 105, 0, 0, 98, 99,
		5, 102, 0, 0, 99, 10, 1, 0, 0, 0, 100, 101, 5, 101, 0, 0, 101, 102, 5,
		108, 0, 0, 102, 103, 5, 115, 0, 0, 103, 104, 5, 101, 0, 0, 104, 12, 1,
		0, 0, 0, 105, 106, 5, 114, 0, 0, 106, 107, 5, 101, 0, 0, 107, 108, 5, 112,
		0, 0, 108, 109, 5, 101, 0, 0, 109, 110, 5, 97, 0, 0, 110, 111, 5, 116,
		0, 0, 111, 14, 1, 0, 0, 0, 112, 113, 5, 40, 0, 0, 113, 16, 1, 0, 0, 0,
		114, 115, 5, 41, 0, 0, 115, 18, 1, 0, 0, 0, 116, 117, 5, 100, 0, 0, 117,
		118, 5, 117, 0, 0, 118, 119, 5, 112, 0, 0, 119, 20, 1, 0, 0, 0, 120, 121,
		5, 114, 0, 0, 121, 122, 5, 111, 0, 0, 122, 123, 5, 116, 0, 0, 123, 22,
		1, 0, 0, 0, 124, 125, 5, 115, 0, 0, 125, 126, 5, 119, 0, 0, 126, 127, 5,
		97, 0, 0, 127, 128, 5, 112, 0, 0, 128, 24, 1, 0, 0, 0, 129, 130, 5, 112,
		0, 0, 130, 131, 5, 111, 0, 0, 131, 132, 5, 112, 0, 0, 132, 26, 1, 0, 0,
		0, 133, 134, 5, 111, 0, 0, 134, 135, 5, 118, 0, 0, 135, 136, 5, 101, 0,
		0, 136, 137, 5, 114, 0, 0, 137, 28, 1, 0, 0, 0, 138, 139, 5, 99, 0, 0,
		139, 140, 5, 58, 0, 0, 140, 30, 1, 0, 0, 0, 141, 142, 5, 110, 0, 0, 142,
		143, 5, 101, 0, 0, 143, 144, 5, 119, 0, 0, 144, 32, 1, 0, 0, 0, 145, 146,
		5, 115, 0, 0, 146, 147, 5, 116, 0, 0, 147, 148, 5, 114, 0, 0, 148, 149,
		5, 117, 0, 0, 149, 150, 5, 99, 0, 0, 150, 151, 5, 116, 0, 0, 151, 34, 1,
		0, 0, 0, 152, 153, 5, 33, 0, 0, 153, 36, 1, 0, 0, 0, 154, 156, 3, 49, 24,
		0, 155, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 155, 1, 0, 0, 0, 157,
		158, 1, 0, 0, 0, 158, 38, 1, 0, 0, 0, 159, 161, 7, 0, 0, 0, 160, 162, 3,
		49, 24, 0, 161, 160, 1, 0, 0, 0, 162, 163, 1, 0, 0, 0, 163, 161, 1, 0,
		0, 0, 163, 164, 1, 0, 0, 0, 164, 40, 1, 0, 0, 0, 165, 167, 3, 49, 24, 0,
		166, 165, 1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 166, 1, 0, 0, 0, 168,
		169, 1, 0, 0, 0, 169, 170, 1, 0, 0, 0, 170, 172, 5, 46, 0, 0, 171, 173,
		3, 49, 24, 0, 172, 171, 1, 0, 0, 0, 173, 174, 1, 0, 0, 0, 174, 172, 1,
		0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 42, 1, 0, 0, 0, 176, 178, 7, 0, 0,
		0, 177, 179, 3, 49, 24, 0, 178, 177, 1, 0, 0, 0, 179, 180, 1, 0, 0, 0,
		180, 178, 1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182,
		184, 5, 46, 0, 0, 183, 185, 3, 49, 24, 0, 184, 183, 1, 0, 0, 0, 185, 186,
		1, 0, 0, 0, 186, 184, 1, 0, 0, 0, 186, 187, 1, 0, 0, 0, 187, 44, 1, 0,
		0, 0, 188, 190, 3, 49, 24, 0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0,
		0, 191, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192, 199, 1, 0, 0, 0, 193,
		195, 5, 46, 0, 0, 194, 196, 3, 49, 24, 0, 195, 194, 1, 0, 0, 0, 196, 197,
		1, 0, 0, 0, 197, 195, 1, 0, 0, 0, 197, 198, 1, 0, 0, 0, 198, 200, 1, 0,
		0, 0, 199, 193, 1, 0, 0, 0, 199, 200, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0,
		201, 203, 7, 1, 0, 0, 202, 204, 7, 0, 0, 0, 203, 202, 1, 0, 0, 0, 203,
		204, 1, 0, 0, 0, 204, 206, 1, 0, 0, 0, 205, 207, 3, 49, 24, 0, 206, 205,
		1, 0, 0, 0, 207, 208, 1, 0, 0, 0, 208, 206, 1, 0, 0, 0, 208, 209, 1, 0,
		0, 0, 209, 46, 1, 0, 0, 0, 210, 212, 7, 0, 0, 0, 211, 213, 3, 49, 24, 0,
		212, 211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 212, 1, 0, 0, 0, 214,
		215, 1, 0, 0, 0, 215, 222, 1, 0, 0, 0, 216, 218, 5, 46, 0, 0, 217, 219,
		3, 49, 24, 0, 218, 217, 1, 0, 0, 0, 219, 220, 1, 0, 0, 0, 220, 218, 1,
		0, 0, 0, 220, 221, 1, 0, 0, 0, 221, 223, 1, 0, 0, 0, 222, 216, 1, 0, 0,
		0, 222, 223, 1, 0, 0, 0, 223, 224, 1, 0, 0, 0, 224, 226, 7, 1, 0, 0, 225,
		227, 7, 0, 0, 0, 226, 225, 1, 0, 0, 0, 226, 227, 1, 0, 0, 0, 227, 229,
		1, 0, 0, 0, 228, 230, 3, 49, 24, 0, 229, 228, 1, 0, 0, 0, 230, 231, 1,
		0, 0, 0, 231, 229, 1, 0, 0, 0, 231, 232, 1, 0, 0, 0, 232, 48, 1, 0, 0,
		0, 233, 234, 7, 2, 0, 0, 234, 50, 1, 0, 0, 0, 235, 236, 5, 48, 0, 0, 236,
		238, 7, 3, 0, 0, 237, 239, 7, 4, 0, 0, 238, 237, 1, 0, 0, 0, 239, 240,
		1, 0, 0, 0, 240, 238, 1, 0, 0, 0, 240, 241, 1, 0, 0, 0, 241, 52, 1, 0,
		0, 0, 242, 243, 5, 48, 0, 0, 243, 245, 7, 5, 0, 0, 244, 246, 7, 6, 0, 0,
		245, 244, 1, 0, 0, 0, 246, 247, 1, 0, 0, 0, 247, 245, 1, 0, 0, 0, 247,
		248, 1, 0, 0, 0, 248, 54, 1, 0, 0, 0, 249, 254, 5, 34, 0, 0, 250, 253,
		3, 61, 30, 0, 251, 253, 8, 7, 0, 0, 252, 250, 1, 0, 0, 0, 252, 251, 1,
		0, 0, 0, 253, 256, 1, 0, 0, 0, 254, 252, 1, 0, 0, 0, 254, 255, 1, 0, 0,
		0, 255, 257, 1, 0, 0, 0, 256, 254, 1, 0, 0, 0, 257, 258, 5, 34, 0, 0, 258,
		56, 1, 0, 0, 0, 259, 262, 5, 39, 0, 0, 260, 263, 3, 61, 30, 0, 261, 263,
		8, 8, 0, 0, 262, 260, 1, 0, 0, 0, 262, 261, 1, 0, 0, 0, 263, 264, 1, 0,
		0, 0, 264, 265, 5, 39, 0, 0, 265, 58, 1, 0, 0, 0, 266, 267, 5, 116, 0,
		0, 267, 268, 5, 114, 0, 0, 268, 269, 5, 117, 0, 0, 269, 276, 5, 101, 0,
		0, 270, 271, 5, 102, 0, 0, 271, 272, 5, 97, 0, 0, 272, 273, 5, 108, 0,
		0, 273, 274, 5, 115, 0, 0, 274, 276, 5, 101, 0, 0, 275, 266, 1, 0, 0, 0,
		275, 270, 1, 0, 0, 0, 276, 60, 1, 0, 0, 0, 277, 278, 5, 92, 0, 0, 278,
		279, 7, 9, 0, 0, 279, 62, 1, 0, 0, 0, 280, 281, 5, 73, 0, 0, 281, 282,
		5, 54, 0, 0, 282, 298, 5, 52, 0, 0, 283, 284, 5, 73, 0, 0, 284, 298, 5,
		56, 0, 0, 285, 286, 5, 83, 0, 0, 286, 287, 5, 116, 0, 0, 287, 298, 5, 114,
		0, 0, 288, 289, 5, 70, 0, 0, 289, 290, 5, 108, 0, 0, 290, 291, 5, 111,
		0, 0, 291, 292, 5, 97, 0, 0, 292, 298, 5, 116, 0, 0, 293, 294, 5, 66, 0,
		0, 294, 295, 5, 111, 0, 0, 295, 296, 5, 111, 0, 0, 296, 298, 5, 108, 0,
		0, 297, 280, 1, 0, 0, 0, 297, 283, 1, 0, 0, 0, 297, 285, 1, 0, 0, 0, 297,
		288, 1, 0, 0, 0, 297, 293, 1, 0, 0, 0, 298, 64, 1, 0, 0, 0, 299, 300, 5,
		60, 0, 0, 300, 317, 5, 61, 0, 0, 301, 302, 5, 62, 0, 0, 302, 317, 5, 61,
		0, 0, 303, 304, 5, 33, 0, 0, 304, 317, 5, 61, 0, 0, 305, 306, 5, 61, 0,
		0, 306, 317, 5, 61, 0, 0, 307, 317, 7, 10, 0, 0, 308, 309, 5, 97, 0, 0,
		309, 310, 5, 110, 0, 0, 310, 317, 5, 100, 0, 0, 311, 312, 5, 111, 0, 0,
		312, 317, 5, 114, 0, 0, 313, 314, 5, 110, 0, 0, 314, 315, 5, 111, 0, 0,
		315, 317, 5, 116, 0, 0, 316, 299, 1, 0, 0, 0, 316, 301, 1, 0, 0, 0, 316,
		303, 1, 0, 0, 0, 316, 305, 1, 0, 0, 0, 316, 307, 1, 0, 0, 0, 316, 308,
		1, 0, 0, 0, 316, 311, 1, 0, 0, 0, 316, 313, 1, 0, 0, 0, 317, 66, 1, 0,
		0, 0, 318, 319, 7, 11, 0, 0, 319, 68, 1, 0, 0, 0, 320, 321, 5, 58, 0, 0,
		321, 322, 5, 61, 0, 0, 322, 70, 1, 0, 0, 0, 323, 324, 5, 38, 0, 0, 324,
		72, 1, 0, 0, 0, 325, 326, 5, 116, 0, 0, 326, 327, 5, 121, 0, 0, 327, 328,
		5, 112, 0, 0, 328, 329, 5, 101, 0, 0, 329, 330, 5, 111, 0, 0, 330, 339,
		5, 102, 0, 0, 331, 332, 5, 108, 0, 0, 332, 333, 5, 101, 0, 0, 333, 339,
		5, 110, 0, 0, 334, 335, 5, 99, 0, 0, 335, 336, 5, 97, 0, 0, 336, 337, 5,
		108, 0, 0, 337, 339, 5, 108, 0, 0, 338, 325, 1, 0, 0, 0, 338, 331, 1, 0,
		0, 0, 338, 334, 1, 0, 0, 0, 339, 74, 1, 0, 0, 0, 340, 341, 5, 91, 0, 0,
		341, 76, 1, 0, 0, 0, 342, 343, 5, 93, 0, 0, 343, 78, 1, 0, 0, 0, 344, 345,
		5, 97, 0, 0, 345, 346, 5, 114, 0, 0, 346, 347, 5, 114, 0, 0, 347, 80, 1,
		0, 0, 0, 348, 349, 5, 64, 0, 0, 349, 82, 1, 0, 0, 0, 350, 354, 7, 12, 0,
		0, 351, 353, 7, 13, 0, 0, 352, 351, 1, 0, 0, 0, 353, 356, 1, 0, 0, 0, 354,
		352, 1, 0, 0, 0, 354, 355, 1, 0, 0, 0, 355, 84, 1, 0, 0, 0, 356, 354, 1,
		0, 0, 0, 357, 359, 7, 14, 0, 0, 358, 357, 1, 0, 0, 0, 359, 360, 1, 0, 0,
		0, 360, 358, 1, 0, 0, 0, 360, 361, 1, 0, 0, 0, 361, 362, 1, 0, 0, 0, 362,
		363, 6, 42, 0, 0, 363, 86, 1, 0, 0, 0, 28, 0, 157, 163, 168, 174, 180,
		186, 191, 197, 199, 203, 208, 214, 220, 222, 226, 231, 240, 247, 252, 254,
		262, 275, 297, 316, 338, 354, 360, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// StcLexerInit initializes any static state used to implement StcLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewStcLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func StcLexerInit() {
	staticData := &StcLexerLexerStaticData
	staticData.once.Do(stclexerLexerInit)
}

// NewStcLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewStcLexer(input antlr.CharStream) *StcLexer {
	StcLexerInit()
	l := new(StcLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &StcLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Stc.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// StcLexer tokens.
const (
	StcLexerT__0                = 1
	StcLexerT__1                = 2
	StcLexerT__2                = 3
	StcLexerT__3                = 4
	StcLexerT__4                = 5
	StcLexerT__5                = 6
	StcLexerT__6                = 7
	StcLexerT__7                = 8
	StcLexerT__8                = 9
	StcLexerT__9                = 10
	StcLexerT__10               = 11
	StcLexerT__11               = 12
	StcLexerT__12               = 13
	StcLexerT__13               = 14
	StcLexerT__14               = 15
	StcLexerNEW                 = 16
	StcLexerSTRUCT_DEFINITION   = 17
	StcLexerSTACK_PREVENTION    = 18
	StcLexerNUMBER              = 19
	StcLexerSIGNED_NUMBER       = 20
	StcLexerFLOAT               = 21
	StcLexerSIGNED_FLOAT        = 22
	StcLexerFLOAT_E             = 23
	StcLexerSIGNED_FLOAT_E      = 24
	StcLexerBIN_NUMBER          = 25
	StcLexerHEX_NUMBER          = 26
	StcLexerSTRING              = 27
	StcLexerCHAR                = 28
	StcLexerBOOL                = 29
	StcLexerSIMPLE_TYPE         = 30
	StcLexerLOGIC_OPERATOR      = 31
	StcLexerARITHMETIC_OPERATOR = 32
	StcLexerASSIGN_OPERATOR     = 33
	StcLexerREFERENCE_OPERATOR  = 34
	StcLexerBUILD_IN_OPERATOR   = 35
	StcLexerARRAY_OPEN          = 36
	StcLexerARRAY_CLOSE         = 37
	StcLexerARRAY_OPERATOR      = 38
	StcLexerAT                  = 39
	StcLexerID                  = 40
	StcLexerWS                  = 41
)
